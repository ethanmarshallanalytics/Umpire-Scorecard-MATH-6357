head(raw_data)
library(readr)
mlb_umpire_scorecard <- read_csv("mlb-umpire-scorecard.csv")
View(mlb_umpire_scorecard)
rm(list=ls())
#Importing data -----
library(readr)
raw_data = read.csv("mlb_umpire_scorecard.csv")
rm(list=ls())
#Importing data -----
library(readr)
raw_data <- read_csv("mlb-umpire-scorecard.csv")
head(raw_data)
view(raw_data)
raw_data
table(raw_data)
View(raw_data)
library(tidyverse)
library(ALSM)
library(dplyr)
library(leaps)
library(MASS)
library(ggplot2)
library(lubridate)
df = data.frame(read.csv('umpire_experience.csv'))
df[,7:21] = sapply(df[,7:21], as.numeric) # convert chr to numeric
df$experience = as.factor(df$experience) # create factor with experience
str(df)
df.predictors = df[,7:22]
full.lm = lm((total_run_impact+1) ~., data = df.predictors)
?boxcox
lambda = boxcox(object = full.lm, lambda = seq(-2, 2, 1/10), plotit = FALSE)
which.max(lambda$y)
lambda$x[20]
lm.bc = lm((total_run_impact+1)^-.1~., data = df.predictors) # create model with transform recommended by BC
plot(df.predictors$total_run_impact, lm.bc$residuals) # residuals closer to normal
best_model = regsubsets((total_run_impact+1)^-.1~., data = df.predictors) # find best predictors with reg subsets
best.summary = summary(best_model)
which.max(best.summary$adjr2) # 8 predictors recommended
best.summary$which[8,]
df_best = df.predictors[best.summary$which[8,]] # create df of best performing predictors
View(df)
# ------------ Predicting 2023 Season ---------------
df.2023 = read.csv("2023_Season_Games.csv")
View(df.2023)
vars = colnames(df_best)
df.2023_best = df.2022[, vars, drop = FALSE]
df.2023_best = df.2023[, vars, drop = FALSE]
predict_2023 = predict(df_best_model, newdata = df.2023_best)
actual_values = df.2023_best$total_run_impact
comparison_df = data.frame(Actual = actual_values, Predicted = predict_2023)
ggplot(comparison_df, aes(x = Actual, y = Predicted)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +  # Add a diagonal line for reference
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values")
predict_2023 = predict(df_best_model, newdata = df.2023_best)
# ------------ Creating lm with df_best as dataset -----------
df_best_model = lm((total_run_impact + 1)^(-0.1) ~ ., data = df_best)
predict_2023 = predict(df_best_model, newdata = df.2023_best)
str(df_best)
str(df.2023_best)
df.2023_best = as.numeric(df.2023_best)
19/7
