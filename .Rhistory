head(raw_data)
library(readr)
mlb_umpire_scorecard <- read_csv("mlb-umpire-scorecard.csv")
View(mlb_umpire_scorecard)
rm(list=ls())
#Importing data -----
library(readr)
raw_data = read.csv("mlb_umpire_scorecard.csv")
rm(list=ls())
#Importing data -----
library(readr)
raw_data <- read_csv("mlb-umpire-scorecard.csv")
head(raw_data)
view(raw_data)
raw_data
table(raw_data)
View(raw_data)
umpire <- read.csv("C:/Users/jesse/OneDrive/Desktop/Grad School/MATH 6357 15443 - Linear Models and Design of Experiments/Project/mlb-umpire-scorecard.csv")
umpire <- read.csv("mlb-umpire-scorecard.csv")
#Convert char to num
umpire$incorrect_calls <- as.numeric(umpire$incorrect_calls)
umpire$pitches_called <- as.numeric(umpire$pitches_called)
umpire$expected_incorrect_calls <- as.numeric(umpire$expected_incorrect_calls)
umpire$correct_calls <- as.numeric(umpire$correct_calls)
umpire$expected_correct_calls <- as.numeric(umpire$expected_correct_calls)
umpire$correct_calls_above_expected <- as.numeric(umpire$correct_calls_above_expected)
umpire$accuracy <- as.numeric(umpire$accuracy)
umpire$expected_accuracy <- as.numeric(umpire$expected_accuracy)
umpire$accuracy_above_expected <- as.numeric(umpire$accuracy_above_expected)
umpire$consistency <- as.numeric(umpire$consistency)
#Convert char to num
umpire$incorrect_calls <- as.numeric(umpire$incorrect_calls)
umpire$pitches_called <- as.numeric(umpire$pitches_called)
umpire$expected_incorrect_calls <- as.numeric(umpire$expected_incorrect_calls)
umpire$correct_calls <- as.numeric(umpire$correct_calls)
umpire$expected_correct_calls <- as.numeric(umpire$expected_correct_calls)
umpire$correct_calls_above_expected <- as.numeric(umpire$correct_calls_above_expected)
umpire$accuracy <- as.numeric(umpire$accuracy)
umpire$expected_accuracy <- as.numeric(umpire$expected_accuracy)
umpire$accuracy_above_expected <- as.numeric(umpire$accuracy_above_expected)
umpire$consistency <- as.numeric(umpire$consistency)
umpire$favor_home <- as.numeric(umpire$favor_home)
umpire$total_run_impact <- as.numeric(umpire$total_run_impact)
#Create a new data frame with out NA's
ump <- data.frame(na.omit(umpire))
#Data with id, date, home, away
ump <- subset(ump, select = -c(id, date, home, away))
## Plotting the all data data
names(ump) <- c('umpire', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12', 'X13', 'Y')
#Create a new data frame with out NA's
ump <- data.frame(na.omit(umpire))
#Data with id, date, home, away
ump <- subset(ump, select = -c(id, date, home, away))
## Plotting the all data data
names(ump) <- c('umpire', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12', 'X13', 'Y')
any(is.na(ump))
avg.lm <- lm(Y~.-umpire, data = ump)
summary(avg.lm)
anova(avg.lm)
resid.avg.lm <- residuals(avg.lm)
plot(ump$Y, avg.lm$residuals)
hist(resid.avg.lm, breaks = 30)
log.lm <- lm(Y ~.-umpire, data = ump)
lm.1 <- lm(log(Y+1)~X1+X2+X4+X13, data = ump)
resid.1 <- residuals(lm.1)
hist(resid.1)
df <- data.frame(ump$X1, ump$X2, ump$X4, ump$X13, ump$Y)
cor(df)
pred <- predict(lm.1)
mean((ump$Y - lm.1$fitted.values)^2)
plot(ump$Y, pred)
abline(lm.1)
full.model <- lm(Y~.-umpire, data = ump)
step(full.model, direction = 'backward')
mean((ump$Y - full.model$fitted.values)^2)
# Home Team Runs VS Total Run Impact
plot(ump$X1, ump$Y, main = 'Home Team Runs Vs Total Run Impact', xlab = 'Home Team Runs', ylab = 'Total Run Impact')
# Away Team Runs VS Total Run Impact
plot(ump$X2, ump$Y, main = 'Away Team Runs VS Total Run Impact', xlab = 'Away Team Runs', ylab = 'Total Run Impact')
# Pitches Called VS Total Run Impact
plot(ump$X3, ump$Y, main = 'Pitches Called VS Total Run Impact', xlab = 'Pitches Called', ylab = 'Total Run Impact')
# Incorrect Calls VS Total Run Impact
plot(ump$X4, ump$Y, main = 'Incorrect Calls VS Total Run Impact', xlab = 'Incorrect Calls', ylab = 'Total Run Impact')
# Expected Incorrect Calls VS Total Run Impact
plot(ump$X5, ump$Y, main = 'Expected Incorrect Calls VS Total Run Impact', xlab = 'Expected Incorrect Calls', ylab = 'Total Run Impact')
# Correct Calls VS Total Run Impact
plot(ump$X6, ump$Y, main = 'Correct Calls VS Total Run Impact', xlab = 'Correct Calls', ylab = 'Total Run Impact')
pairs(umpire)
?pairs
umpire.isna()
is.na()
?is.na()
is.na(umpire)
View(umpire)
num(umpire)
length(umpire)
df <- data.frame(read.csv('mlb-umpire-scorecard.csv'))
df <- data.frame(read.csv('mlb-umpire-scorecard.csv'))
df[,6:19] <- sapply(df[,6:19], as.numeric) # convert chr to numeric
str(df)
df.drop <- drop_na(df) # drop missing values
df.numeric <- df.drop[6:19]
full.lm <- lm(log(total_run_impact)~.,data = df.numeric) # build model on log of y
# run best subsets to determine predictors
lm.best <- regsubsets(total_run_impact~., data = df.numeric, method = 'exhaustive')
plot(lm.best$rss)
# K-folds CV to estimate out of sample error
for(j in 1:k){
# Fit the model with each subset of predictors on the training part of the fold
best.fit=regsubsets(Salary~.,data=Hitters[folds!=j,], nvmax=19)
# For each subset
for(i in 1:19){
# Predict on the hold out part of the fold for that subset
pred=predict(best.fit, Hitters[folds==j,],id=i)
# Get the mean squared error for the model trained on the fold with the subset
cv.errors[j,i]=mean((Hitters$Salary[folds==j]-pred)^2)
}
}
cor(df)
rm(list=ls())
df <- data.frame(read.csv('mlb-umpire-scorecard.csv'))
df[,6:19] <- sapply(df[,6:19], as.numeric) # convert chr to numeric
str(df)
warnings()
df.drop <- drop_na(df) # drop missing values
df.numeric <- df.drop[6:19]
cor(df)
# Correlation Between Variables -----
numeric_subset <- df %>% select_if(function(x) is.numeric(x) || is.integer(x))
library(dplyr)
# Correlation Between Variables -----
numeric_subset <- df %>% select_if(function(x) is.numeric(x) || is.integer(x))
cor(df)
# Correlation Between Variables -----
numeric_subset <- df %>% select_if(function(x) is.numeric(x))
cor(df)
View(numeric_subset)
numeric_susbet = subset[c(-1), df]
numeric_susbet = numeric_subset[,-1]
cor(df)
df(str)
str(df)
cor(numeric_subset)
numeric_susbet = numeric_subset[,-1]
cor(numeric_subset)
df <- data.frame(read.csv('mlb-umpire-scorecard.csv'))
df[,6:19] <- sapply(df[,6:19], as.numeric) # convert chr to numeric
str(df)
df.drop <- drop_na(df) # drop missing values
df.numeric <- df.drop[6:19]
# Correlation Between Variables -----
numeric_subset <- df %>% select_if(function(x) is.numeric(x))
numeric_susbet = numeric_subset[,-1]
cor(numeric_subset)
str(df)
str(numeric_subset)
cor(numeric_subset)
